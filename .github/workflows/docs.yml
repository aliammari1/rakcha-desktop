name: Documentation and Status Updates

on:
  push:
    branches: [main]
    paths:
      - "**.md"
      - "docs/**"
      - "src/main/java/**"
  workflow_run:
    workflows: ["CI - Continuous Integration", "CD - Continuous Deployment"]
    types: [completed]
  schedule:
    - cron: "0 0 * * 0" # Weekly on Sunday at midnight

permissions:
  contents: write
  pages: write
  id-token: write

env:
  JAVA_VERSION: "17"

jobs:
  update-badges:
    name: Update Status Badges
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README badges
        run: |
          # Create or update badges in README.md
          if [ -f "README.md" ]; then
            echo "Updating README.md with status badges..."
            
            # Backup original README
            cp README.md README.md.backup
            
            # Create badges section
            cat > badges.md << 'EOF'
          # RAKCHA Desktop Application

          [![CI](https://github.com/${{ github.repository }}/workflows/CI%20-%20Continuous%20Integration/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/ci.yml)
          [![CD](https://github.com/${{ github.repository }}/workflows/CD%20-%20Continuous%20Deployment/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/cd.yml)
          [![Security](https://github.com/${{ github.repository }}/workflows/Security%20and%20Dependency%20Scanning/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/security.yml)
          [![JavaFX Tests](https://github.com/${{ github.repository }}/workflows/JavaFX%20Application%20Tests/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/javafx-tests.yml)
          [![Database Tests](https://github.com/${{ github.repository }}/workflows/Database%20Integration%20Tests/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/database-tests.yml)
          [![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
          [![Java](https://img.shields.io/badge/java-17+-orange.svg)](https://openjdk.java.net/)
          [![JavaFX](https://img.shields.io/badge/javafx-17+-green.svg)](https://openjfx.io/)
          [![SQLite](https://img.shields.io/badge/database-sqlite-blue.svg)](https://www.sqlite.org/)

          EOF
            
            # If README already has badges, replace them; otherwise prepend
            if grep -q "badge.svg" README.md; then
              # Replace existing badges section
              sed -i '/\!\[.*badge\.svg/d' README.md
              cat badges.md > README.new.md
              tail -n +2 README.md >> README.new.md
              mv README.new.md README.md
            else
              # Prepend badges to existing README
              cat badges.md > README.new.md
              cat README.md >> README.new.md
              mv README.new.md README.md
            fi
            
            rm badges.md
          else
            echo "README.md not found, creating a basic one..."
            cat > README.md << 'EOF'
          # RAKCHA Desktop Application

          [![CI](https://github.com/${{ github.repository }}/workflows/CI%20-%20Continuous%20Integration/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/ci.yml)
          [![CD](https://github.com/${{ github.repository }}/workflows/CD%20-%20Continuous%20Deployment/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/cd.yml)
          [![Security](https://github.com/${{ github.repository }}/workflows/Security%20and%20Dependency%20Scanning/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/security.yml)
          [![License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)
          [![Java](https://img.shields.io/badge/java-17+-orange.svg)](https://openjdk.java.net/)

          A modern JavaFX desktop application with SQLite database integration.

          ## Features

          - Modern JavaFX user interface
          - SQLite database with Hibernate ORM
          - Cross-platform compatibility (Windows, Linux, macOS)
          - Automated CI/CD pipeline
          - Comprehensive testing suite

          ## Quick Start

          ### Prerequisites
          - Java 17 or higher
          - Maven 3.6 or higher

          ### Running the Application

          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd rakcha-desktop

          # Build and run
          mvn clean compile exec:java
          ```

          ## Development

          ### Building
          ```bash
          mvn clean package
          ```

          ### Testing
          ```bash
          mvn test
          ```

          ### Database
          The application uses SQLite by default. The database file is created automatically at `data/rakcha_db.sqlite`.

          ## License

          This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
          EOF
          fi

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "docs: update README with status badges"
            git push origin main
          else
            echo "No changes to commit"
          fi

  generate-javadoc:
    name: Generate and Deploy Javadoc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate Javadoc
        run: |
          mvn clean javadoc:javadoc

          # Ensure docs directory exists and has content
          if [ ! -d "docs" ] || [ -z "$(ls -A docs)" ]; then
            echo "Creating basic documentation structure..."
            mkdir -p docs
            echo "<html><head><title>RAKCHA Documentation</title></head><body><h1>Documentation will be available soon</h1></body></html>" > docs/index.html
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Javadoc to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  project-metrics:
    name: Generate Project Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate project metrics
        run: |
          echo "# Project Metrics Report" > project-metrics.md
          echo "" >> project-metrics.md
          echo "Generated on: $(date)" >> project-metrics.md
          echo "" >> project-metrics.md

          # Code statistics
          echo "## Code Statistics" >> project-metrics.md
          echo "" >> project-metrics.md

          # Count lines of code
          JAVA_LINES=$(find src/main/java -name "*.java" -exec wc -l {} + | tail -1 | awk '{print $1}')
          TEST_LINES=$(find src/test/java -name "*.java" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          JAVA_FILES=$(find src/main/java -name "*.java" | wc -l)
          TEST_FILES=$(find src/test/java -name "*.java" 2>/dev/null | wc -l || echo "0")

          echo "- **Java Source Lines**: $JAVA_LINES" >> project-metrics.md
          echo "- **Test Lines**: $TEST_LINES" >> project-metrics.md
          echo "- **Java Files**: $JAVA_FILES" >> project-metrics.md
          echo "- **Test Files**: $TEST_FILES" >> project-metrics.md
          echo "" >> project-metrics.md

          # Git statistics
          echo "## Git Statistics" >> project-metrics.md
          echo "" >> project-metrics.md
          COMMITS=$(git rev-list --count HEAD)
          CONTRIBUTORS=$(git log --format='%an' | sort -u | wc -l)
          LAST_COMMIT=$(git log -1 --format='%cd' --date=short)

          echo "- **Total Commits**: $COMMITS" >> project-metrics.md
          echo "- **Contributors**: $CONTRIBUTORS" >> project-metrics.md
          echo "- **Last Commit**: $LAST_COMMIT" >> project-metrics.md
          echo "" >> project-metrics.md

          # Dependencies
          echo "## Dependencies" >> project-metrics.md
          echo "" >> project-metrics.md
          mvn dependency:tree -DoutputType=text -DoutputFile=dependency-tree.txt
          DEPS=$(grep -c '\[INFO\]' dependency-tree.txt || echo "0")
          echo "- **Total Dependencies**: $DEPS" >> project-metrics.md
          echo "" >> project-metrics.md

      - name: Upload project metrics
        uses: actions/upload-artifact@v4
        with:
          name: project-metrics
          path: |
            project-metrics.md
            dependency-tree.txt
          retention-days: 30

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check repository health
        run: |
          echo "# Repository Health Check" > health-report.md
          echo "" >> health-report.md
          echo "Generated on: $(date)" >> health-report.md
          echo "" >> health-report.md

          # Check for essential files
          echo "## Essential Files" >> health-report.md
          echo "" >> health-report.md

          files=("README.md" "LICENSE" "pom.xml" ".gitignore" "CONTRIBUTING.md" "SECURITY.md")
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "- ✅ $file" >> health-report.md
            else
              echo "- ❌ $file (missing)" >> health-report.md
            fi
          done

          echo "" >> health-report.md

          # Check for CI/CD workflows
          echo "## CI/CD Workflows" >> health-report.md
          echo "" >> health-report.md

          workflows=("ci.yml" "cd.yml" "security.yml" "database-tests.yml" "javafx-tests.yml")
          for workflow in "${workflows[@]}"; do
            if [ -f ".github/workflows/$workflow" ]; then
              echo "- ✅ $workflow" >> health-report.md
            else
              echo "- ❌ $workflow (missing)" >> health-report.md
            fi
          done

          echo "" >> health-report.md

          # Check directory structure
          echo "## Directory Structure" >> health-report.md
          echo "" >> health-report.md

          dirs=("src/main/java" "src/test/java" "src/main/resources" "data" "docs")
          for dir in "${dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "- ✅ $dir/" >> health-report.md
            else
              echo "- ❌ $dir/ (missing)" >> health-report.md
            fi
          done

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: repository-health-report
          path: health-report.md
          retention-days: 7
