name: Database Integration Tests

on:
  schedule:
    - cron: "0 2 * * *" # Run daily at 2 AM
  workflow_dispatch:
  push:
    paths:
      - "src/main/java/com/esprit/models/**"
      - "src/main/java/com/esprit/services/**"
      - "src/main/java/com/esprit/config/**"
      - "src/main/resources/hibernate*.properties"
      - "rakcha_db.sql"

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  sqlite-integration:
    name: SQLite Database Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create data directory
        run: mkdir -p data

      - name: Set SQLite environment variables
        run: |
          echo "DB_TYPE=sqlite" >> $GITHUB_ENV
          echo "DB_URL=jdbc:sqlite:data/test_rakcha_db.sqlite" >> $GITHUB_ENV
          echo "DB_USER=" >> $GITHUB_ENV
          echo "DB_PASSWORD=" >> $GITHUB_ENV

      - name: Initialize SQLite database
        run: |
          # Create a test database with schema
          touch data/test_rakcha_db.sqlite

          # If SQL schema file exists, we could initialize it here
          if [ -f "rakcha_db.sql" ]; then
            echo "Found database schema file"
          fi

      - name: Run database integration tests
        run: |
          mvn test -Dtest="*DatabaseTest,*RepositoryTest,*ServiceTest" -DfailIfNoTests=false
          mvn test -Dtest="*IntegrationTest" -DfailIfNoTests=false

      - name: Run full integration test suite
        run: mvn verify -DskipUnitTests=true

      - name: Verify database integrity
        run: |
          # Basic SQLite database integrity check
          if command -v sqlite3 &> /dev/null; then
            sqlite3 data/test_rakcha_db.sqlite "PRAGMA integrity_check;"
            sqlite3 data/test_rakcha_db.sqlite ".tables"
          else
            echo "SQLite3 command not available, skipping integrity check"
          fi

      - name: Upload test database
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sqlite-test-database
          path: data/test_rakcha_db.sqlite
          retention-days: 3

  mysql-integration:
    name: MySQL Database Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: rakcha_db_test
          MYSQL_USER: rakcha_user
          MYSQL_PASSWORD: rakcha_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 10
          done

      - name: Set MySQL environment variables
        run: |
          echo "DB_TYPE=mysql" >> $GITHUB_ENV
          echo "DB_URL=jdbc:mysql://localhost:3306/rakcha_db_test?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true" >> $GITHUB_ENV
          echo "DB_USER=rakcha_user" >> $GITHUB_ENV
          echo "DB_PASSWORD=rakcha_pass" >> $GITHUB_ENV

      - name: Initialize MySQL database
        run: |
          mysql -h127.0.0.1 -P3306 -uroot -proot -e "SHOW DATABASES;"

          # If SQL schema file exists, initialize the database
          if [ -f "rakcha_db.sql" ]; then
            echo "Initializing MySQL database with schema..."
            mysql -h127.0.0.1 -P3306 -urakcha_user -prakcha_pass rakcha_db_test < rakcha_db.sql || echo "Schema initialization skipped or failed"
          fi

      - name: Run database integration tests
        run: |
          mvn test -Dtest="*DatabaseTest,*RepositoryTest,*ServiceTest" -DfailIfNoTests=false
          mvn test -Dtest="*IntegrationTest" -DfailIfNoTests=false

  h2-integration:
    name: H2 Database Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set H2 environment variables
        run: |
          echo "DB_TYPE=h2" >> $GITHUB_ENV
          echo "DB_URL=jdbc:h2:mem:rakcha_db_test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE" >> $GITHUB_ENV
          echo "DB_USER=sa" >> $GITHUB_ENV
          echo "DB_PASSWORD=" >> $GITHUB_ENV

      - name: Run database integration tests
        run: |
          mvn test -Dtest="*DatabaseTest,*RepositoryTest,*ServiceTest" -DfailIfNoTests=false
          mvn test -Dtest="*IntegrationTest" -DfailIfNoTests=false

  cross-database-compatibility:
    name: Cross-Database Compatibility Test
    runs-on: ubuntu-latest
    needs: [sqlite-integration, mysql-integration, h2-integration]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: rakcha_db_test
          MYSQL_USER: rakcha_user
          MYSQL_PASSWORD: rakcha_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        database: [sqlite, mysql, h2]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create data directory (SQLite)
        if: matrix.database == 'sqlite'
        run: mkdir -p data

      - name: Set database environment variables
        run: |
          case ${{ matrix.database }} in
            sqlite)
              echo "DB_TYPE=sqlite" >> $GITHUB_ENV
              echo "DB_URL=jdbc:sqlite:data/compat_test_rakcha_db.sqlite" >> $GITHUB_ENV
              echo "DB_USER=" >> $GITHUB_ENV
              echo "DB_PASSWORD=" >> $GITHUB_ENV
              ;;
            mysql)
              echo "DB_TYPE=mysql" >> $GITHUB_ENV
              echo "DB_URL=jdbc:mysql://localhost:3306/rakcha_db_test?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true" >> $GITHUB_ENV
              echo "DB_USER=rakcha_user" >> $GITHUB_ENV
              echo "DB_PASSWORD=rakcha_pass" >> $GITHUB_ENV
              ;;
            h2)
              echo "DB_TYPE=h2" >> $GITHUB_ENV
              echo "DB_URL=jdbc:h2:mem:rakcha_db_compat_test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE" >> $GITHUB_ENV
              echo "DB_USER=sa" >> $GITHUB_ENV
              echo "DB_PASSWORD=" >> $GITHUB_ENV
              ;;
          esac

      - name: Wait for MySQL (if needed)
        if: matrix.database == 'mysql'
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 10
          done

      - name: Run compatibility tests for ${{ matrix.database }}
        run: |
          echo "Testing with ${{ matrix.database }} database"
          mvn test -Dtest="*CompatibilityTest" -DfailIfNoTests=false

          # Run a subset of core tests to ensure basic functionality
          mvn test -Dtest="*ServiceTest" -DfailIfNoTests=false

      - name: Upload compatibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compatibility-test-results-${{ matrix.database }}
          path: |
            target/surefire-reports/
            data/
          retention-days: 3
