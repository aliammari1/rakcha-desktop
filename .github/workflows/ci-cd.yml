name: JavaFX CI/CD Pipeline with JavaPackager

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx3g -Dmaven.repo.local=.m2/repository'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Verify Maven configuration
      run: mvn help:effective-pom -q
    
    - name: Run tests with headless mode
      run: mvn clean test -Djava.awt.headless=true -Dtestfx.robot=glass -Dtestfx.headless=true -Dprism.order=sw
    
    - name: Build JAR
      run: mvn clean package -DskipTests
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar
        retention-days: 30

  package-windows:
    needs: build-and-test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Install WiX Toolset
      shell: pwsh
      run: |
        if (!(Get-Command "light.exe" -ErrorAction SilentlyContinue)) {
          choco install wixtoolset -y
          echo "C:\Program Files (x86)\WiX Toolset v3.14\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }

    - name: Verify WiX installation
      shell: pwsh
      run: |
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.14\bin"
        light.exe -?
    
    - name: Package Windows application
      shell: pwsh
      run: |
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.14\bin"
        mvn clean package io.github.fvarrui:javapackager:1.7.6:package -DskipTests `
          -Dplatform=windows `
          -DbundleJre=true `
          -DgenerateInstaller=true `
          -DadministratorRequired=false `
          -Dverbose=true
    
    - name: List output files
      shell: pwsh
      run: |
        Get-ChildItem -Recurse target | Where-Object { $_.Extension -in @('.exe', '.msi') } | ForEach-Object { Write-Host $_.FullName }
    
    - name: Upload Windows executables
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: |
          target/*.exe
          target/**/*.exe
        retention-days: 30
      if: always()
    
    - name: Upload Windows MSI installers
      uses: actions/upload-artifact@v4
      with:
        name: windows-msi
        path: |
          target/*.msi
          target/**/*.msi
        retention-days: 30
      if: always()

  package-linux:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install Linux packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y fakeroot dpkg-dev rpm binutils
    
    - name: Package Linux application
      run: |
        mvn clean package io.github.fvarrui:javapackager:1.7.6:package -DskipTests \
          -Dplatform=linux \
          -DbundleJre=true \
          -DgenerateInstaller=true \
          -Dverbose=true
    
    - name: List output files
      run: |
        find target -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.zip" \) -exec ls -la {} \;
    
    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          target/*.deb
          target/*.rpm
          target/*.zip
          target/*.tar.gz
          target/**/*.deb
          target/**/*.rpm
          target/**/*.zip
          target/**/*.tar.gz
        retention-days: 30
      if: always()

  package-macos:
    needs: build-and-test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Package macOS application
      run: |
        mvn clean package io.github.fvarrui:javapackager:1.7.6:package -DskipTests \
          -Dplatform=mac \
          -DbundleJre=true \
          -DgenerateInstaller=true \
          -Dverbose=true
    
    - name: List output files
      run: |
        find target -type f \( -name "*.dmg" -o -name "*.pkg" -o -name "*.zip" \) -exec ls -la {} \;
    
    - name: Upload macOS packages
      uses: actions/upload-artifact@v4
      with:
        name: macos-packages
        path: |
          target/*.dmg
          target/*.pkg
          target/*.zip
          target/**/*.dmg
          target/**/*.pkg
          target/**/*.zip
        retention-days: 30
      if: always()

  collect-artifacts:
    needs: [package-windows, package-linux, package-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display artifact structure
      run: find ./artifacts -type f -name "*" -exec ls -la {} \;
    
    - name: Archive all artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-release-artifacts
        path: ./artifacts
        retention-days: 30

  release:
    needs: [package-windows, package-linux, package-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display artifact structure
      run: find ./artifacts -type f -name "*" -exec ls -la {} \;
    
    - name: Find and upload Windows installer
      shell: bash
      run: |
        WIN_EXE=$(find ./artifacts -name "*.exe" -type f | head -1)
        if [ -n "$WIN_EXE" ]; then
          echo "Found Windows installer: $WIN_EXE"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            "${{ github.event.release.upload_url }}?name=RakchaDesktop-${{ github.event.release.tag_name }}-windows.exe" \
            --data-binary "@$WIN_EXE" || echo "Failed to upload Windows installer"
        else
          echo "No Windows installer found"
        fi
      continue-on-error: true
    
    - name: Find and upload Windows MSI
      shell: bash
      run: |
        WIN_MSI=$(find ./artifacts -name "*.msi" -type f | head -1)
        if [ -n "$WIN_MSI" ]; then
          echo "Found Windows MSI: $WIN_MSI"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            "${{ github.event.release.upload_url }}?name=RakchaDesktop-${{ github.event.release.tag_name }}-windows.msi" \
            --data-binary "@$WIN_MSI" || echo "Failed to upload Windows MSI"
        else
          echo "No Windows MSI found"
        fi
      continue-on-error: true
    
    - name: Find and upload Linux DEB
      shell: bash
      run: |
        LINUX_DEB=$(find ./artifacts -name "*.deb" -type f | head -1)
        if [ -n "$LINUX_DEB" ]; then
          echo "Found Linux DEB: $LINUX_DEB"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/vnd.debian.binary-package" \
            "${{ github.event.release.upload_url }}?name=RakchaDesktop-${{ github.event.release.tag_name }}-linux.deb" \
            --data-binary "@$LINUX_DEB" || echo "Failed to upload Linux DEB"
        else
          echo "No Linux DEB found"
        fi
      continue-on-error: true
    
    - name: Find and upload macOS DMG
      shell: bash
      run: |
        MAC_DMG=$(find ./artifacts -name "*.dmg" -type f | head -1)
        if [ -n "$MAC_DMG" ]; then
          echo "Found macOS DMG: $MAC_DMG"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/x-apple-diskimage" \
            "${{ github.event.release.upload_url }}?name=RakchaDesktop-${{ github.event.release.tag_name }}-macos.dmg" \
            --data-binary "@$MAC_DMG" || echo "Failed to upload macOS DMG"
        else
          echo "No macOS DMG found"
        fi
      continue-on-error: true

  notify-deployment:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && success()
    
    steps:
    - name: Notify successful deployment
      run: |
        echo "✅ Release ${{ github.event.release.tag_name }} has been successfully deployed!"
        echo "📦 Windows, Linux, and macOS packages have been created and uploaded."

  auto-release:
    needs: [collect-artifacts]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
    
    - name: Create semantic release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release
    
    - name: Download artifacts for release
      if: success()
      uses: actions/download-artifact@v4
      with:
        name: all-release-artifacts
        path: ./release-artifacts

  troubleshoot:
    runs-on: ubuntu-latest
    if: failure()
    needs: [package-windows, package-linux, package-macos]
    
    steps:
    - name: Troubleshoot Java and JavaFX setup
      run: |
        echo "=== Java Version ==="
        java -version
        echo "=== JavaFX Module Path ==="
        find /opt/hostedtoolcache/Java_Temurin_jdk -name "*javafx*" 2>/dev/null || echo "JavaFX not found in JDK"
        echo "=== Maven Version ==="
        mvn -version
        echo "=== Available System Tools ==="
        which jpackage || echo "jpackage not found"
        echo "=== Memory and Disk Usage ==="
        free -h
        df -h
        echo "=== Environment Variables ==="
        env | grep -E "(JAVA|PATH|MAVEN)" | sort
