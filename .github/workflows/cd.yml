name: CD - Continuous Deployment

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
        default: "1.0.0"

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable-suffix: ""
            archive-format: tar.gz
          - os: windows-latest
            platform: windows
            executable-suffix: .exe
            archive-format: zip
          - os: macos-latest
            platform: macos
            executable-suffix: ""
            archive-format: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
        shell: bash

      - name: Create data directory and initialize SQLite database
        run: |
          mkdir -p data
          # Copy the database schema if it exists
          if [ -f "rakcha_db.sql" ]; then
            echo "Database schema found"
          fi
        shell: bash

      - name: Set database environment variables
        run: |
          echo "DB_TYPE=sqlite" >> $GITHUB_ENV
          echo "DB_URL=jdbc:sqlite:data/rakcha_db.sqlite" >> $GITHUB_ENV
          echo "DB_USER=" >> $GITHUB_ENV
          echo "DB_PASSWORD=" >> $GITHUB_ENV

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.VERSION }}
          mvn versions:commit

      - name: Run tests
        run: mvn test
        env:
          TESTFX_HEADLESS: true
          JAVA_OPTS: >-
            --add-opens javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
            --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
            --add-opens javafx.controls/javafx.scene.control=ALL-UNNAMED
            --add-opens javafx.base/com.sun.javafx.event=ALL-UNNAMED
            --add-opens java.base/java.lang.reflect=ALL-UNNAMED
            --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
            -Dprism.order=sw

      - name: Package application
        run: mvn clean package -DskipTests

      - name: Create distribution directory
        run: |
          mkdir -p dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}

          # Copy JAR files
          cp target/*.jar dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/

          # Copy database and data directory
          cp -r data dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/

          # Copy configuration files
          cp src/main/java/com/esprit/config.yml dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/ || true

          # Copy documentation
          cp README.md LICENSE CONTRIBUTING.md dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/ || true

          # Create JavaFX libs directory for platform-specific modules if not bundled
          mkdir -p dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/javafx-sdk/lib

          # Copy run scripts
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp run-rakcha*.bat dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/ || true
          else
            cp database.sh dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/ || true
          fi

      - name: Create startup script (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          cat > dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/run-rakcha.sh << 'EOF'
          #!/bin/bash

          # RAKCHA JavaFX Application Launcher

          # Set up environment
          export DB_TYPE=sqlite
          export DB_URL=jdbc:sqlite:data/rakcha_db.sqlite
          export DB_USER=""
          export DB_PASSWORD=""

          # Create data directory if it doesn't exist
          mkdir -p data

          # Find the JAR file
          JAR_FILE=$(ls *.jar | head -n 1)

          if [ -z "$JAR_FILE" ]; then
              echo "Error: No JAR file found!"
              exit 1
          fi

          echo "Starting RAKCHA application..."
          echo "Using database: $DB_URL"

          # Check if JavaFX is bundled or needs to be specified
          if [ -d "javafx-sdk/lib" ]; then
              echo "Using bundled JavaFX SDK..."
              JAVAFX_MODULES="javafx.controls,javafx.fxml,javafx.web,javafx.media,javafx.graphics"
              # Use module path for Java 11+
              java --module-path javafx-sdk/lib --add-modules $JAVAFX_MODULES \
                --add-opens javafx.graphics/com.sun.javafx.application=ALL-UNNAMED \
                --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED \
                --add-opens javafx.controls/javafx.scene.control=ALL-UNNAMED \
                --add-opens javafx.base/com.sun.javafx.event=ALL-UNNAMED \
                -jar "$JAR_FILE" "$@"
          else
              # Assume JavaFX is bundled in the JAR
              java -jar "$JAR_FILE" "$@"
          fi
          EOF

          chmod +x dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/run-rakcha.sh

      - name: Create startup script (Windows)
        if: matrix.platform == 'windows'
        run: |
          cat > dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/run-rakcha.bat << 'EOF'
          @echo off

          REM RAKCHA JavaFX Application Launcher

          REM Set up environment
          set DB_TYPE=sqlite
          set DB_URL=jdbc:sqlite:data/rakcha_db.sqlite
          set DB_USER=
          set DB_PASSWORD=

          REM Create data directory if it doesn't exist
          if not exist data mkdir data

          REM Find the JAR file
          for %%f in (*.jar) do set JAR_FILE=%%f

          if "%JAR_FILE%"=="" (
              echo Error: No JAR file found!
              pause
              exit /b 1
          )

          echo Starting RAKCHA application...
          echo Using database: %DB_URL%

          REM Check if JavaFX is bundled or needs to be specified
          if exist javafx-sdk\lib (
              echo Using bundled JavaFX SDK...
              set JAVAFX_MODULES=javafx.controls,javafx.fxml,javafx.web,javafx.media,javafx.graphics
              java --module-path javafx-sdk\lib --add-modules %JAVAFX_MODULES% ^
                --add-opens javafx.graphics/com.sun.javafx.application=ALL-UNNAMED ^
                --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED ^
                --add-opens javafx.controls/javafx.scene.control=ALL-UNNAMED ^
                --add-opens javafx.base/com.sun.javafx.event=ALL-UNNAMED ^
                -jar "%JAR_FILE%" %*
          ) else (
              REM Assume JavaFX is bundled in the JAR
              java -jar "%JAR_FILE%" %*
          )

          if errorlevel 1 (
              echo Application exited with error code %errorlevel%
              pause
          )
          EOF
        shell: bash

      - name: Create README for distribution
        run: |
          cat > dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}/README-DISTRIBUTION.md << 'EOF'
          # RAKCHA Desktop Application

          Version: ${{ steps.version.outputs.VERSION }}
          Platform: ${{ matrix.platform }}
          Build Date: $(date)

          ## Requirements

          - Java 17 or higher
          - At least 1GB of RAM
          - 500MB of disk space

          ## Quick Start

          ### ${{ matrix.platform == 'windows' && 'Windows' || 'Linux/macOS' }}

          ${{ matrix.platform == 'windows' && '1. Double-click `run-rakcha.bat`' || '1. Run `./run-rakcha.sh`' }}
          2. The application will start with SQLite database
          3. Data will be stored in the `data/` directory

          ## Database

          This distribution uses SQLite database by default. The database file is located at:
          `data/rakcha_db.sqlite`

          ## Configuration

          You can modify database settings by editing the `config.yml` file or setting environment variables:

          - `DB_TYPE`: Database type (sqlite, mysql, postgresql, h2)
          - `DB_URL`: Database connection URL
          - `DB_USER`: Database username
          - `DB_PASSWORD`: Database password

          ## Troubleshooting

          If you encounter issues:

          1. Ensure Java 17+ is installed: `java -version`
          2. Check that the `data/` directory is writable
          3. Review the application logs for error messages

          For more information, visit: https://github.com/your-repo/rakcha-desktop
          EOF

      - name: Create archive (Linux/macOS)
        if: matrix.archive-format == 'tar.gz'
        run: |
          cd dist
          tar -czf rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}.tar.gz rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}

      - name: Create archive (Windows)
        if: matrix.archive-format == 'zip'
        run: |
          cd dist
          powershell Compress-Archive -Path "rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}" -DestinationPath "rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}.zip"

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}
          path: |
            dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}.*
          retention-days: 30

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: RAKCHA Desktop v${{ steps.version.outputs.VERSION }}
          body: |
            ## RAKCHA Desktop Application v${{ steps.version.outputs.VERSION }}

            ### What's New
            - Updated to version ${{ steps.version.outputs.VERSION }}
            - Built with Java ${{ env.JAVA_VERSION }}
            - Includes SQLite database integration
            - Cross-platform support (Windows, Linux, macOS)

            ### Downloads
            - **Windows**: `rakcha-${{ steps.version.outputs.VERSION }}-windows.zip`
            - **Linux**: `rakcha-${{ steps.version.outputs.VERSION }}-linux.tar.gz`
            - **macOS**: `rakcha-${{ steps.version.outputs.VERSION }}-macos.tar.gz`

            ### Installation
            1. Download the appropriate archive for your platform
            2. Extract the archive
            3. Run the startup script (`run-rakcha.bat` on Windows, `./run-rakcha.sh` on Linux/macOS)

            ### Requirements
            - Java 17 or higher
            - At least 1GB of RAM
            - 500MB of disk space

            ### Database
            This release includes SQLite database integration with automatic schema initialization.

            For more information, see the README-DISTRIBUTION.md file included in each archive.
          files: |
            dist/rakcha-${{ steps.version.outputs.VERSION }}-${{ matrix.platform }}.*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
