name: Release Management

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: "Create as prerelease"
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: "17"

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}

          # Remove -SNAPSHOT if present
          BASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}

          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Determine release type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Auto-determine based on commit messages
            if git log --oneline $(git describe --tags --abbrev=0)..HEAD | grep -q "BREAKING CHANGE\|feat!"; then
              RELEASE_TYPE="major"
            elif git log --oneline $(git describe --tags --abbrev=0)..HEAD | grep -q "^feat"; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi

          # Calculate new version
          case $RELEASE_TYPE in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          TAG_NAME="v$NEW_VERSION"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

          echo "Calculated new version: $NEW_VERSION (was: $CURRENT_VERSION, type: $RELEASE_TYPE)"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMIT_RANGE="HEAD"
          else
            COMMIT_RANGE="$LAST_TAG..HEAD"
          fi

          # Generate changelog
          CHANGELOG=$(cat << 'EOF'
          ## What's Changed

          ### Features
          $(git log $COMMIT_RANGE --oneline --grep="^feat" --pretty="* %s" || echo "* No new features")

          ### Bug Fixes
          $(git log $COMMIT_RANGE --oneline --grep="^fix" --pretty="* %s" || echo "* No bug fixes")

          ### Other Changes
          $(git log $COMMIT_RANGE --oneline --grep="^docs\|^style\|^refactor\|^test\|^chore" --pretty="* %s" || echo "* No other changes")

          ### Database Changes
          $(git log $COMMIT_RANGE --oneline --name-only | grep -E "(rakcha_db\.sql|hibernate.*\.properties|models/|services/)" | head -5 | sed 's/^/* Database: /' || echo "* No database changes")

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.tag }}
          EOF
          )

          # Save changelog to file
          echo "$CHANGELOG" > changelog.md

          # Set output for GitHub
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
          mvn versions:commit

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git tag ${{ steps.version.outputs.tag }}

      - name: Push changes and tag
        run: |
          git push origin main
          git push origin ${{ steps.version.outputs.tag }}

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag }}

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          name: RAKCHA Desktop ${{ needs.prepare-release.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  trigger-deployment:
    name: Trigger Deployment Workflow
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]

    steps:
      - name: Trigger CD workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'cd.yml',
              ref: '${{ needs.prepare-release.outputs.tag }}',
              inputs: {
                version: '${{ needs.prepare-release.outputs.version }}'
              }
            });

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: prepare-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update README with new version
        run: |
          # Update version badge in README if it exists
          if [ -f "README.md" ]; then
            sed -i 's/\[Version\].*$/[Version ${{ needs.prepare-release.outputs.version }}]/' README.md || true
            sed -i 's/version-.*-/version-${{ needs.prepare-release.outputs.version }}-/' README.md || true
          fi

      - name: Update CHANGELOG.md
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new release to CHANGELOG.md
          {
            echo "# Changelog"
            echo ""
            echo "## [${{ needs.prepare-release.outputs.version }}] - $(date +%Y-%m-%d)"
            echo ""
            cat changelog.md | tail -n +2
            echo ""
            tail -n +3 CHANGELOG.md
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md CHANGELOG.md || true
          git diff --staged --quiet || git commit -m "docs: update documentation for version ${{ needs.prepare-release.outputs.version }}"
          git push origin main || true

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()

    steps:
      - name: Create release summary
        run: |
          echo "# Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## RAKCHA Desktop ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.prepare-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Features" >> $GITHUB_STEP_SUMMARY
          echo "- JavaFX Desktop Application" >> $GITHUB_STEP_SUMMARY
          echo "- SQLite Database Integration" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-platform Support (Windows, Linux, macOS)" >> $GITHUB_STEP_SUMMARY
          echo "- Automated CI/CD Pipeline" >> $GITHUB_STEP_SUMMARY
