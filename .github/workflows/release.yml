name: JavaFX Release Build

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.7)'
        required: true
        type: string

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx4g -Dmaven.repo.local=.m2/repository'
  APP_NAME: 'RAKCHA'
  VENDOR: 'RAKCHA Team'

jobs:
  build-jar:
    name: Build Cross-Platform JAR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Extract version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version_number }} -DgenerateBackupPoms=false
    
    - name: Run tests with headless mode
      run: |
        mvn clean test -Djava.awt.headless=true \
          -Dtestfx.robot=glass \
          -Dtestfx.headless=true \
          -Dprism.order=sw \
          -Dprism.verbose=true \
          --batch-mode
    
    - name: Build application JAR
      run: |
        mvn clean package -DskipTests --batch-mode
    
    - name: Create distribution archive
      run: |
        mvn assembly:single -DskipTests --batch-mode
    
    - name: Prepare distribution structure
      run: |
        mkdir -p distribution/{bin,libs,docs}
        
        # Copy main JAR
        cp target/RAKCHA-${{ steps.version.outputs.version_number }}.jar distribution/
        
        # Copy dependencies
        mvn dependency:copy-dependencies -DoutputDirectory=distribution/libs
        
        # Create launch scripts
        cat > distribution/bin/rakcha.sh << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        APP_DIR="$(dirname "$SCRIPT_DIR")"
        
        # Set JavaFX module path
        JAVAFX_MODULES="$APP_DIR/libs"
        
        # Launch application
        java --module-path "$JAVAFX_MODULES" \
             --add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED \
             --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED \
             --add-modules javafx.controls,javafx.fxml,javafx.web,javafx.swing,javafx.media \
             -Dfile.encoding=UTF-8 \
             -Dsun.jnu.encoding=UTF-8 \
             -cp "$APP_DIR/RAKCHA-${{ steps.version.outputs.version_number }}.jar:$APP_DIR/libs/*" \
             com.esprit.MainApp "$@"
        EOF
        
        cat > distribution/bin/rakcha.bat << 'EOF'
        @echo off
        setlocal
        
        set SCRIPT_DIR=%~dp0
        set APP_DIR=%SCRIPT_DIR%..
        
        REM Set JavaFX module path
        set JAVAFX_MODULES=%APP_DIR%\libs
        
        REM Launch application
        java --module-path "%JAVAFX_MODULES%" ^
             --add-exports javafx.graphics/com.sun.javafx.application=ALL-UNNAMED ^
             --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED ^
             --add-modules javafx.controls,javafx.fxml,javafx.web,javafx.swing,javafx.media ^
             -Dfile.encoding=UTF-8 ^
             -Dsun.jnu.encoding=UTF-8 ^
             -cp "%APP_DIR%\RAKCHA-${{ steps.version.outputs.version_number }}.jar;%APP_DIR%\libs\*" ^
             com.esprit.MainApp %*
        EOF
        
        # Make scripts executable
        chmod +x distribution/bin/*.sh
        
        # Copy documentation
        cp README.md distribution/docs/ 2>/dev/null || echo "README.md not found"
        cp LICENSE distribution/docs/ 2>/dev/null || echo "LICENSE not found"
        
        # Create distribution archives
        cd distribution
        tar -czf ../target/RAKCHA-${{ steps.version.outputs.version_number }}-distribution.tar.gz .
        zip -r ../target/RAKCHA-${{ steps.version.outputs.version_number }}-distribution.zip .
    
    - name: Upload JAR distribution artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-distribution
        path: |
          target/RAKCHA-${{ steps.version.outputs.version_number }}-distribution.tar.gz
          target/RAKCHA-${{ steps.version.outputs.version_number }}-distribution.zip
          target/RAKCHA-${{ steps.version.outputs.version_number }}.jar
        retention-days: 90

  build-native-windows:
    name: Build Windows Native Package
    runs-on: windows-latest
    needs: build-jar
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Extract version
      id: version
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $Version = "${{ github.event.inputs.version }}"
        } else {
          $Version = "${{ github.ref }}" -replace "refs/tags/", ""
        }
        $VersionNumber = $Version -replace "^v", ""
        echo "version=$Version" >> $env:GITHUB_OUTPUT
        echo "version_number=$VersionNumber" >> $env:GITHUB_OUTPUT
        Write-Host "Release version: $Version"
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version_number }} -DgenerateBackupPoms=false
    
    - name: Install WiX Toolset
      shell: pwsh
      run: |
        if (!(Get-Command "light.exe" -ErrorAction SilentlyContinue)) {
          Write-Host "Installing WiX Toolset..."
          choco install wixtoolset -y --force
          $wixPath = "C:\Program Files (x86)\WiX Toolset v3.14\bin"
          echo "$wixPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH += ";$wixPath"
          Write-Host "WiX Toolset installed"
        }
    
    - name: Build and package Windows application
      shell: pwsh
      run: |
        $env:PATH += ";C:\Program Files (x86)\WiX Toolset v3.14\bin"
        
        # Build with assembly plugin for fat JAR
        mvn clean package -DskipTests --batch-mode
        
        # Create native Windows package using jpackage
        $jarFile = "target\RAKCHA-${{ steps.version.outputs.version_number }}.jar"
        if (Test-Path $jarFile) {
          Write-Host "Creating Windows installer with jpackage..."
          
          # Create input directory with all dependencies
          New-Item -ItemType Directory -Force -Path "target\jpackage-input"
          Copy-Item $jarFile "target\jpackage-input\"
          
          # Run jpackage
          & jpackage `
            --input target/jpackage-input `
            --name "$env:APP_NAME" `
            --main-jar "RAKCHA-${{ steps.version.outputs.version_number }}.jar" `
            --main-class com.esprit.MainApp `
            --type exe `
            --dest target/installer `
            --app-version "${{ steps.version.outputs.version_number }}" `
            --vendor "$env:VENDOR" `
            --description "RAKCHA Desktop Application" `
            --copyright "Copyright (c) 2024 RAKCHA Team" `
            --win-menu `
            --win-shortcut `
            --win-per-user-install `
            --java-options "-Dfile.encoding=UTF-8" `
            --java-options "-Dsun.jnu.encoding=UTF-8"
          
          Write-Host "jpackage completed"
        } else {
          Write-Error "JAR file not found: $jarFile"
          exit 1
        }
    
    - name: List generated files
      shell: pwsh
      run: |
        Write-Host "=== Target directory contents ==="
        Get-ChildItem -Recurse target | Where-Object { -not $_.PSIsContainer } | 
          ForEach-Object { Write-Host $_.FullName }
    
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          target/installer/*.exe
          target/installer/*.msi
        retention-days: 90
      if: always()

  build-native-linux:
    name: Build Linux Native Package
    runs-on: ubuntu-latest
    needs: build-jar
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version_number }} -DgenerateBackupPoms=false
    
    - name: Install Linux packaging tools
      run: |
        sudo apt-get update
        sudo apt-get install -y fakeroot dpkg-dev rpm binutils desktop-file-utils
    
    - name: Build and package Linux application
      run: |
        # Build with assembly plugin for fat JAR
        mvn clean package -DskipTests --batch-mode
        
        # Create native Linux package using jpackage
        JAR_FILE="target/RAKCHA-${{ steps.version.outputs.version_number }}.jar"
        if [ -f "$JAR_FILE" ]; then
          echo "Creating Linux package with jpackage..."
          
          # Create input directory
          mkdir -p target/jpackage-input
          cp "$JAR_FILE" target/jpackage-input/
          
          # Create DEB package
          jpackage \
            --input target/jpackage-input \
            --name "$APP_NAME" \
            --main-jar "RAKCHA-${{ steps.version.outputs.version_number }}.jar" \
            --main-class com.esprit.MainApp \
            --type deb \
            --dest target/installer \
            --app-version "${{ steps.version.outputs.version_number }}" \
            --vendor "$VENDOR" \
            --description "RAKCHA Desktop Application" \
            --copyright "Copyright (c) 2024 RAKCHA Team" \
            --linux-menu-group "Office" \
            --linux-shortcut \
            --java-options "-Dfile.encoding=UTF-8" \
            --java-options "-Dsun.jnu.encoding=UTF-8"
          
          # Create RPM package
          jpackage \
            --input target/jpackage-input \
            --name "$APP_NAME" \
            --main-jar "RAKCHA-${{ steps.version.outputs.version_number }}.jar" \
            --main-class com.esprit.MainApp \
            --type rpm \
            --dest target/installer \
            --app-version "${{ steps.version.outputs.version_number }}" \
            --vendor "$VENDOR" \
            --description "RAKCHA Desktop Application" \
            --copyright "Copyright (c) 2024 RAKCHA Team" \
            --linux-menu-group "Office" \
            --linux-shortcut \
            --java-options "-Dfile.encoding=UTF-8" \
            --java-options "-Dsun.jnu.encoding=UTF-8"
          
          echo "jpackage completed"
        else
          echo "Error: JAR file not found: $JAR_FILE"
          exit 1
        fi
    
    - name: List generated files
      run: |
        echo "=== Target directory contents ==="
        find target -type f -name "*" -exec ls -la {} \;
    
    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          target/installer/*.deb
          target/installer/*.rpm
        retention-days: 90
      if: always()

  build-native-macos:
    name: Build macOS Native Package
    runs-on: macos-latest
    needs: build-jar
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
    
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version_number }} -DgenerateBackupPoms=false
    
    - name: Build and package macOS application
      run: |
        # Build with assembly plugin for fat JAR
        mvn clean package -DskipTests --batch-mode
        
        # Create native macOS package using jpackage
        JAR_FILE="target/RAKCHA-${{ steps.version.outputs.version_number }}.jar"
        if [ -f "$JAR_FILE" ]; then
          echo "Creating macOS package with jpackage..."
          
          # Create input directory
          mkdir -p target/jpackage-input
          cp "$JAR_FILE" target/jpackage-input/
          
          # Create DMG package
          jpackage \
            --input target/jpackage-input \
            --name "$APP_NAME" \
            --main-jar "RAKCHA-${{ steps.version.outputs.version_number }}.jar" \
            --main-class com.esprit.MainApp \
            --type dmg \
            --dest target/installer \
            --app-version "${{ steps.version.outputs.version_number }}" \
            --vendor "$VENDOR" \
            --description "RAKCHA Desktop Application" \
            --copyright "Copyright (c) 2024 RAKCHA Team" \
            --mac-package-name "$APP_NAME" \
            --java-options "-Dfile.encoding=UTF-8" \
            --java-options "-Dsun.jnu.encoding=UTF-8"
          
          echo "jpackage completed"
        else
          echo "Error: JAR file not found: $JAR_FILE"
          exit 1
        fi
    
    - name: List generated files
      run: |
        echo "=== Target directory contents ==="
        find target -type f -name "*" -exec ls -la {} \;
    
    - name: Upload macOS packages
      uses: actions/upload-artifact@v4
      with:
        name: macos-packages
        path: |
          target/installer/*.dmg
          target/installer/*.pkg
        retention-days: 90
      if: always()

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-jar, build-native-windows, build-native-linux, build-native-macos]
    if: always() && (needs.build-jar.result == 'success')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Release version: ${VERSION}"
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display artifact structure
      run: |
        echo "=== Downloaded artifacts ==="
        find ./artifacts -type f -name "*" -exec ls -la {} \;
    
    - name: Prepare release files
      run: |
        mkdir -p release-files
        
        # Copy JAR distribution files
        if [ -d "./artifacts/jar-distribution" ]; then
          cp ./artifacts/jar-distribution/* release-files/ 2>/dev/null || true
        fi
        
        # Copy Windows installers
        if [ -d "./artifacts/windows-installer" ]; then
          find ./artifacts/windows-installer -name "*.exe" -exec cp {} release-files/RAKCHA-${{ steps.version.outputs.version_number }}-windows-installer.exe \; 2>/dev/null || true
          find ./artifacts/windows-installer -name "*.msi" -exec cp {} release-files/RAKCHA-${{ steps.version.outputs.version_number }}-windows.msi \; 2>/dev/null || true
        fi
        
        # Copy Linux packages
        if [ -d "./artifacts/linux-packages" ]; then
          find ./artifacts/linux-packages -name "*.deb" -exec cp {} release-files/RAKCHA-${{ steps.version.outputs.version_number }}-linux.deb \; 2>/dev/null || true
          find ./artifacts/linux-packages -name "*.rpm" -exec cp {} release-files/RAKCHA-${{ steps.version.outputs.version_number }}-linux.rpm \; 2>/dev/null || true
        fi
        
        # Copy macOS packages
        if [ -d "./artifacts/macos-packages" ]; then
          find ./artifacts/macos-packages -name "*.dmg" -exec cp {} release-files/RAKCHA-${{ steps.version.outputs.version_number }}-macos.dmg \; 2>/dev/null || true
          find ./artifacts/macos-packages -name "*.pkg" -exec cp {} release-files/RAKCHA-${{ steps.version.outputs.version_number }}-macos.pkg \; 2>/dev/null || true
        fi
        
        echo "=== Prepared release files ==="
        ls -la release-files/
    
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        # RAKCHA Desktop ${{ steps.version.outputs.version }}
        
        ## 📦 Downloads
        
        ### Cross-Platform (Requires Java 21+)
        - **JAR Distribution (ZIP)**: \`RAKCHA-${{ steps.version.outputs.version_number }}-distribution.zip\`
        - **JAR Distribution (TAR.GZ)**: \`RAKCHA-${{ steps.version.outputs.version_number }}-distribution.tar.gz\`
        - **Standalone JAR**: \`RAKCHA-${{ steps.version.outputs.version_number }}.jar\`
        
        ### Native Installers (No Java Required)
        - **Windows**: \`RAKCHA-${{ steps.version.outputs.version_number }}-windows-installer.exe\`
        - **Linux (DEB)**: \`RAKCHA-${{ steps.version.outputs.version_number }}-linux.deb\`
        - **Linux (RPM)**: \`RAKCHA-${{ steps.version.outputs.version_number }}-linux.rpm\`
        - **macOS**: \`RAKCHA-${{ steps.version.outputs.version_number }}-macos.dmg\`
        
        ## 🚀 Installation Instructions
        
        ### Windows
        1. Download \`RAKCHA-${{ steps.version.outputs.version_number }}-windows-installer.exe\`
        2. Run the installer as administrator
        3. Follow the installation wizard
        4. Launch from Start Menu or Desktop shortcut
        
        ### Linux (Ubuntu/Debian)
        \`\`\`bash
        # Download and install DEB package
        wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/RAKCHA-${{ steps.version.outputs.version_number }}-linux.deb
        sudo dpkg -i RAKCHA-${{ steps.version.outputs.version_number }}-linux.deb
        sudo apt-get install -f  # Fix any dependency issues
        \`\`\`
        
        ### Linux (CentOS/RHEL/Fedora)
        \`\`\`bash
        # Download and install RPM package
        wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/RAKCHA-${{ steps.version.outputs.version_number }}-linux.rpm
        sudo rpm -i RAKCHA-${{ steps.version.outputs.version_number }}-linux.rpm
        \`\`\`
        
        ### macOS
        1. Download \`RAKCHA-${{ steps.version.outputs.version_number }}-macos.dmg\`
        2. Open the DMG file
        3. Drag RAKCHA to Applications folder
        4. Launch from Applications or Launchpad
        
        ### Cross-Platform JAR (Any OS with Java 21+)
        \`\`\`bash
        # Download and extract distribution
        wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/RAKCHA-${{ steps.version.outputs.version_number }}-distribution.zip
        unzip RAKCHA-${{ steps.version.outputs.version_number }}-distribution.zip
        cd RAKCHA-${{ steps.version.outputs.version_number }}-distribution
        
        # Run on Unix/Linux/Mac
        ./bin/rakcha.sh
        
        # Run on Windows
        bin\\rakcha.bat
        \`\`\`
        
        ## 📋 System Requirements
        
        ### Native Installers
        - **Windows**: Windows 10 or later (64-bit)
        - **Linux**: Ubuntu 18.04+ / CentOS 7+ / Fedora 30+ (64-bit)
        - **macOS**: macOS 10.14+ (64-bit)
        
        ### JAR Distribution
        - **Java**: OpenJDK/Oracle JDK 21 or later
        - **RAM**: 2GB minimum, 4GB recommended
        - **Disk**: 500MB free space
        
        ## 🔧 Technical Details
        - Built with OpenJDK 21
        - JavaFX 21.0.7
        - Native packages include embedded JRE (~200-300 MB)
        - JAR distribution is ~50-80 MB (requires separate Java installation)
        
        ## 📝 Changelog
        See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        
        ## 🐛 Issues & Support
        Report issues at: https://github.com/${{ github.repository }}/issues
        EOF
        
        echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: RAKCHA Desktop ${{ steps.version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.release_notes_file }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}
        files: |
          release-files/*
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deployment Summary
      run: |
        echo "## 🎉 Release Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Release Created**: [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Generated Packages:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows Installer (EXE)" >> $GITHUB_STEP_SUMMARY
        echo "- Linux Packages (DEB, RPM)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS Installer (DMG)" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-Platform JAR Distribution" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Test the released packages on target platforms" >> $GITHUB_STEP_SUMMARY
        echo "2. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Announce the release to your users" >> $GITHUB_STEP_SUMMARY
