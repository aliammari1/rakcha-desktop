name: Security and Dependency Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 6 * * 1" # Weekly on Monday at 6 AM

permissions:
  contents: read
  security-events: write
  actions: read

env:
  JAVA_VERSION: "17"

jobs:
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Cache OWASP Dependency Check database
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: ${{ runner.os }}-owasp-db-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-owasp-db-

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -DsuppressionsFile=owasp-suppressions.xml \
            -Dformats=HTML,XML,SARIF \
            -DskipProvidedScope=true \
            -DskipTestScope=true \
            -DassemblyAnalyzerEnabled=false \
            -DnodeAnalyzerEnabled=false \
            -DnodeAuditAnalyzerEnabled=false \
            -DretireJsAnalyzerEnabled=false
        continue-on-error: true

      - name: Upload OWASP Dependency Check SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: target/dependency-check-report.sarif

      - name: Upload OWASP reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-reports
          path: |
            target/dependency-check-report.html
            target/dependency-check-report.xml
            target/dependency-check-report.sarif
          retention-days: 30

  spotbugs-analysis:
    name: SpotBugs Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Compile project and run SpotBugs
        run: |
          mvn compile
          mvn com.github.spotbugs:spotbugs-maven-plugin:check -Dspotbugs.effort=Max -Dspotbugs.threshold=Medium
        continue-on-error: true

      - name: Upload SpotBugs reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spotbugs-reports
          path: |
            target/spotbugs*.xml
            target/site/spotbugs*.html
          retention-days: 7

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Generate license report (quick mode)
        run: |
          mvn org.codehaus.mojo:license-maven-plugin:aggregate-add-third-party -Dlicense.excludedScopes=test,provided
          mvn org.codehaus.mojo:license-maven-plugin:download-licenses -Dlicense.excludedScopes=test,provided -Dlicense.skipDownloadLicenses=false

      - name: Check for GPL/LGPL licenses
        run: |
          if [ -f "target/generated-sources/license/THIRD-PARTY.txt" ]; then
            echo "Checking for potentially problematic licenses..."
            if grep -i "gpl\|agpl" target/generated-sources/license/THIRD-PARTY.txt; then
              echo "⚠️ Warning: GPL/AGPL licenses found. Review required."
              cat target/generated-sources/license/THIRD-PARTY.txt
              # Not failing the build but flagging the potential issue
            else
              echo "✅ No problematic licenses detected."
            fi
          else
            echo "⚠️ License report file not found. Check plugin configuration."
          fi
        continue-on-error: true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            target/generated-sources/license/
            target/licenses/
          retention-days: 7

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified
        continue-on-error: true

  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: rakcha:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "rakcha:security-scan"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.sarif
          retention-days: 7

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [dependency-check, spotbugs-analysis, license-check, secrets-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Create security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Check dependency scan status
          if [ "${{ needs.dependency-check.result }}" == "success" ]; then
            DEPENDENCY_STATUS="✅ Passed"
          elif [ "${{ needs.dependency-check.result }}" == "cancelled" ]; then
            DEPENDENCY_STATUS="⚠️ Cancelled"
          else
            DEPENDENCY_STATUS="❌ Failed"
          fi

          # Check spotbugs status
          if [ "${{ needs.spotbugs-analysis.result }}" == "success" ]; then
            SPOTBUGS_STATUS="✅ Passed"
          elif [ "${{ needs.spotbugs-analysis.result }}" == "cancelled" ]; then
            SPOTBUGS_STATUS="⚠️ Cancelled"
          else
            SPOTBUGS_STATUS="❌ Failed"
          fi

          # Check license check status
          if [ "${{ needs.license-check.result }}" == "success" ]; then
            LICENSE_STATUS="✅ Passed"
          elif [ "${{ needs.license-check.result }}" == "cancelled" ]; then
            LICENSE_STATUS="⚠️ Cancelled"
          else
            LICENSE_STATUS="❌ Failed"
          fi

          # Check secrets scan status
          if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
            SECRETS_STATUS="✅ Passed"
          elif [ "${{ needs.secrets-scan.result }}" == "cancelled" ]; then
            SECRETS_STATUS="⚠️ Cancelled"
          else
            SECRETS_STATUS="❌ Failed"
          fi

          echo "| OWASP Dependency Check | $DEPENDENCY_STATUS | Checks for known vulnerabilities in dependencies |" >> $GITHUB_STEP_SUMMARY
          echo "| SpotBugs Analysis | $SPOTBUGS_STATUS | Static analysis for potential bugs and security issues |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | $LICENSE_STATUS | Verifies license compatibility |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | $SECRETS_STATUS | Scans for exposed secrets in code |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Review any high-severity vulnerabilities immediately" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies regularly" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor for new security advisories" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure no secrets are committed to the repository" >> $GITHUB_STEP_SUMMARY
