name: CI - Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            display: ":99"
          - os: windows-latest
            display: ""
          - os: macos-latest
            display: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up virtual display (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Create data directory
        run: mkdir -p data

      - name: Set database environment variables
        run: |
          echo "DB_TYPE=sqlite" >> $GITHUB_ENV
          echo "DB_URL=jdbc:sqlite:data/rakcha_db.sqlite" >> $GITHUB_ENV
          echo "DB_USER=" >> $GITHUB_ENV
          echo "DB_PASSWORD=" >> $GITHUB_ENV

      - name: Validate Maven project
        run: mvn validate

      - name: Compile project
        run: mvn compile

      - name: Run unit tests
        run: mvn test
        env:
          DISPLAY: ${{ matrix.display }}
          TESTFX_HEADLESS: true

      - name: Run integration tests
        run: mvn verify -DskipUnitTests=true
        env:
          DISPLAY: ${{ matrix.display }}
          TESTFX_HEADLESS: true

      - name: Run code quality checks
        run: |
          mvn checkstyle:check
          mvn pmd:check

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests (${{ matrix.os }})
          path: target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            target/surefire-reports/
            target/failsafe-reports/
            target/checkstyle-result.xml
            target/pmd.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check
        continue-on-error: true

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: target/dependency-check-report.html

  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create data directory and SQLite database
        run: mkdir -p data

      - name: Set database environment variables
        run: |
          echo "DB_TYPE=sqlite" >> $GITHUB_ENV
          echo "DB_URL=jdbc:sqlite:data/rakcha_db.sqlite" >> $GITHUB_ENV
          echo "DB_USER=" >> $GITHUB_ENV
          echo "DB_PASSWORD=" >> $GITHUB_ENV

      - name: Package application
        run: mvn package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rakcha-build-${{ matrix.os }}
          path: |
            target/*.jar
            data/
            run-rakcha*.bat
          retention-days: 7
