name: CI - Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: "-Xmx1024m"
  TESTFX_HEADLESS: "true"
  TESTFX_ROBOT: "glass"
  PRISM_ORDER: "sw"

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            display: ":99"
          - os: windows-latest
            display: ""
          - os: macos-latest
            display: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up virtual display (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxtst6 libxrender1 libxi6 libgl1-mesa-glx fontconfig
          export DISPLAY=:99
          Xvfb :99 -screen 0 1280x1024x24 -ac > /dev/null 2>&1 &
          sleep 3 # Wait for Xvfb to start completely

      - name: Create data directory (Unix)
        if: runner.os != 'Windows'
        run: mkdir -p data

      - name: Create data directory (Windows)
        if: runner.os == 'Windows'
        run: |
          if (!(Test-Path "data")) {
            New-Item -ItemType Directory -Path "data"
          }

      - name: Set database environment variables
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            echo "DB_TYPE=sqlite" >> $env:GITHUB_ENV
            echo "DB_URL=jdbc:sqlite:data/rakcha_db.sqlite" >> $env:GITHUB_ENV
            echo "DB_USER=" >> $env:GITHUB_ENV
            echo "DB_PASSWORD=" >> $env:GITHUB_ENV
          else
            echo "DB_TYPE=sqlite" >> $GITHUB_ENV
            echo "DB_URL=jdbc:sqlite:data/rakcha_db.sqlite" >> $GITHUB_ENV
            echo "DB_USER=" >> $GITHUB_ENV
            echo "DB_PASSWORD=" >> $GITHUB_ENV
          fi

      - name: Validate Maven project
        run: mvn validate

      - name: Compile project
        run: mvn compile

      - name: Run unit tests
        run: mvn test
        env:
          DISPLAY: ${{ matrix.display }}
          TESTFX_HEADLESS: true
          JAVA_OPTS: >-
            --add-opens javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
            --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
            --add-opens javafx.controls/javafx.scene.control=ALL-UNNAMED
            --add-opens javafx.base/com.sun.javafx.event=ALL-UNNAMED
            --add-opens java.base/java.lang.reflect=ALL-UNNAMED
            --add-exports javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
            -Dprism.order=sw

      - name: Run integration tests
        run: mvn verify -DskipUnitTests=true
        env:
          DISPLAY: ${{ matrix.display }}
          TESTFX_HEADLESS: true

      - name: Run code quality checks
        run: |
          mvn checkstyle:check
          mvn pmd:check

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests (${{ matrix.os }})
          path: "**/target/surefire-reports/TEST-*.xml"
          reporter: java-junit
          fail-on-error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            target/surefire-reports/
            target/failsafe-reports/
            target/checkstyle-result.xml
            target/pmd.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check
        continue-on-error: true

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-report
          path: target/dependency-check-report.html

  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create data directory and SQLite database
        run: mkdir -p data

      - name: Set database environment variables
        run: |
          echo "DB_TYPE=sqlite" >> $GITHUB_ENV
          echo "DB_URL=jdbc:sqlite:data/rakcha_db.sqlite" >> $GITHUB_ENV
          echo "DB_USER=" >> $GITHUB_ENV
          echo "DB_PASSWORD=" >> $GITHUB_ENV

      - name: Initialize SQLite database (if needed)
        run: |
          if [ -f "rakcha_db.sql" ]; then
            if [ "${{ runner.os }}" = "Windows" ]; then
              # For Windows, use PowerShell to initialize SQLite
              powershell -Command "if (!(Test-Path 'data/rakcha_db.sqlite')) { sqlite3 data/rakcha_db.sqlite '.read rakcha_db.sql' }"
            else
              # For Linux/macOS
              if [ ! -f "data/rakcha_db.sqlite" ]; then
                if command -v sqlite3 &> /dev/null; then
                  echo "Initializing SQLite database from schema..."
                  sqlite3 data/rakcha_db.sqlite < rakcha_db.sql
                else
                  echo "SQLite3 command not found, installing..."
                  if [ "$(uname)" = "Darwin" ]; then
                    brew install sqlite3
                  else
                    sudo apt-get install -y sqlite3
                  fi
                  sqlite3 data/rakcha_db.sqlite < rakcha_db.sql
                fi
              fi
            fi
            echo "Database initialized successfully."
          else
            echo "No database schema found (rakcha_db.sql), skipping initialization."
            touch data/rakcha_db.sqlite
          fi

      - name: Package application
        run: mvn package -DskipTests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rakcha-build-${{ matrix.os }}
          path: |
            target/*.jar
            data/
            run-rakcha*.bat
          retention-days: 7
