<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.example</groupId>
  <artifactId>RAKCHA</artifactId>
  <version>1.0.6</version>
  <properties>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <file.encoding>UTF-8</file.encoding>
    <jpro.version>2024.4.1</jpro.version>

    <!-- JPackage properties -->
    <main-class>com.esprit.MainApp</main-class>
    <app.name>RAKCHA</app.name>
    <app.version>${project.version}</app.version>

    <!-- Windows installer properties -->
    <windows.upgrade.uuid>12345678-abcd-1234-abcd-123456789012</windows.upgrade.uuid>
    <windows.vendor>RAKCHA Team</windows.vendor>

    <!-- JVM modules for jlink -->
    <jvm.modules>
      javafx.media,javafx.controls,javafx.fxml,javafx.swing,java.logging,java.base,java.desktop,java.sql,java.xml,java.net.http,java.naming,java.management</jvm.modules>
  </properties>

  <repositories>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
    <repository>
      <id>maven-central</id>
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>
    <repository>
      <id>jpro - sandec repository</id>
      <url>https://sandec.jfrog.io/artifactory/repo</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>jpro - sandec repository</id>
      <url>https://sandec.jfrog.io/artifactory/repo</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <dependency>
      <groupId>one.jpro</groupId>
      <artifactId>jpro-webapi</artifactId>
      <version>${jpro.version}</version>
      <scope>compile</scope>
    </dependency>


    <!-- SQLite JDBC Driver -->
    <dependency>
      <groupId>org.xerial</groupId>
      <artifactId>sqlite-jdbc</artifactId>
      <version>3.50.2.0</version>
    </dependency>

    <!-- XML Processing Dependencies -->
    <!-- JAXB and Activation APIs - Jakarta version -->
    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
      <version>4.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jaxb</groupId>
      <artifactId>jaxb-runtime</artifactId>
      <version>4.0.5</version>
    </dependency>
    <dependency>
      <groupId>jakarta.activation</groupId>
      <artifactId>jakarta.activation-api</artifactId>
      <version>2.1.3</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.angus</groupId>
      <artifactId>angus-activation</artifactId>
      <version>2.0.2</version>
    </dependency>

    <!-- Additional XML support -->
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>4.0.5</version>
    </dependency>

    <!-- Jackson XML support for compatibility -->
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
      <version>2.19.1</version>
    </dependency>

    <!-- Logging Dependencies -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.1.0-alpha1</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.5.18-jpro</version>
    </dependency>

    <!-- Testing Dependencies -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>6.0.0-M1</version>
      <scope>test</scope>
    </dependency>

    <!-- Modern UI Packages -->
    <!-- MaterialFX for modern UI components -->
    <dependency>
      <groupId>io.github.palexdev</groupId>
      <artifactId>materialfx</artifactId>
      <version>21.18.0-alpha</version>
    </dependency>

    <!-- JFoenix for Material Design components -->
    <dependency>
      <groupId>com.jfoenix</groupId>
      <artifactId>jfoenix</artifactId>
      <version>9.0.10</version>
    </dependency>


    <!-- FontAwesome Icons -->
    <dependency>
      <groupId>de.jensd</groupId>
      <artifactId>fontawesomefx-materialicons</artifactId>
      <version>2.2.0-9.1.2</version>
    </dependency>

    <!-- Ikonli for additional icons -->
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-material-pack</artifactId>
      <version>12.4.0</version>
    </dependency>

    <!-- Existing Dependencies -->
    <dependency>
      <groupId>com.github.PlusHaze</groupId>
      <artifactId>TrayNotification</artifactId>
      <version>a8bfa597eb</version>
    </dependency>
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>9.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.cloudinary</groupId>
      <artifactId>cloudinary-http5</artifactId>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.cloudinary</groupId>
      <artifactId>cloudinary-taglib</artifactId>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>io.github.cdimascio</groupId>
      <artifactId>dotenv-java</artifactId>
      <version>3.2.0</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>21.0.7</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-fxml</artifactId>
      <version>21.0.7</version>
    </dependency>
    <dependency>
      <groupId>de.jensd</groupId>
      <artifactId>fontawesomefx-fontawesome</artifactId>
      <version>4.7.0-9.1.2</version>
    </dependency>
    <dependency>
      <groupId>org.controlsfx</groupId>
      <artifactId>controlsfx</artifactId>
      <version>11.2.2</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-base</artifactId>
      <version>21.0.7</version>
    </dependency>
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client-jackson2</artifactId>
      <version>1.47.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.apis</groupId>
      <artifactId>google-api-services-youtube</artifactId>
      <version>v3-rev20250422-2.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.api-client</groupId>
      <artifactId>google-api-client</artifactId>
      <version>2.8.0</version>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.5.0-b01</version>
    </dependency>
    <dependency>
      <groupId>net.synedra</groupId>
      <artifactId>validatorfx</artifactId>
      <version>0.6.1</version>
    </dependency>
    <dependency>
      <groupId>com.stripe</groupId>
      <artifactId>stripe-java</artifactId>
      <version>29.4.0-beta.2</version>
    </dependency>
    <dependency>
      <groupId>com.sun.mail</groupId>
      <artifactId>javax.mail</artifactId>
      <version>1.6.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-email</artifactId>
      <version>1.6.0</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.19.0</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.18.0</version>
    </dependency>
    <dependency>
      <groupId>com.vonage</groupId>
      <artifactId>server-sdk</artifactId>
      <version>9.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20250517</version>
    </dependency>
    <dependency>
      <groupId>com.github.scribejava</groupId>
      <artifactId>scribejava-apis</artifactId>
      <version>8.3.3</version>
    </dependency>
    <dependency>
      <groupId>com.github.scribejava</groupId>
      <artifactId>scribejava-httpclient-okhttp</artifactId>
      <version>8.3.3</version>
    </dependency>
    <dependency>
      <groupId>com.github.scribejava</groupId>
      <artifactId>scribejava-httpclient-ahc</artifactId>
      <version>8.3.3</version>
    </dependency>
    <dependency>
      <groupId>org.asynchttpclient</groupId>
      <artifactId>async-http-client</artifactId>
      <version>3.0.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.pdfbox</groupId>
      <artifactId>pdfbox</artifactId>
      <version>3.0.5</version>
    </dependency>
    <dependency>
      <groupId>com.google.zxing</groupId>
      <artifactId>core</artifactId>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>com.google.zxing</groupId>
      <artifactId>javase</artifactId>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>com.twilio.sdk</groupId>
      <artifactId>twilio</artifactId>
      <version>11.0.0-rc.2</version>
    </dependency>
    <dependency>
      <groupId>com.itextpdf</groupId>
      <artifactId>itextpdf</artifactId>
      <version>5.5.13.4</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-web</artifactId>
      <version>21.0.7</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-swing</artifactId>
      <version>21.0.7</version>
    </dependency>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-media</artifactId>
      <version>21.0.7</version>
    </dependency>
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-javafx</artifactId>
      <version>12.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-core</artifactId>
      <version>12.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-fontawesome5-pack</artifactId>
      <version>12.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.kordamp.ikonli</groupId>
      <artifactId>ikonli-fontawesome-pack</artifactId>
      <version>12.4.0</version>
    </dependency>
    <dependency>
      <groupId>com.paypal.sdk</groupId>
      <artifactId>rest-api-sdk</artifactId>
      <version>1.14.0</version>
    </dependency>
    <dependency>
      <groupId>eu.iamgio</groupId>
      <artifactId>animated</artifactId>
      <version>1.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.github.apanimesh061</groupId>
      <artifactId>VaderSentimentJava</artifactId>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>org.mindrot</groupId>
      <artifactId>jbcrypt</artifactId>
      <version>0.4</version>
    </dependency>
    <dependency>
      <groupId>io.github.typhon0</groupId>
      <artifactId>AnimateFX</artifactId>
      <version>1.3.0</version>
    </dependency>
    <!-- Lombok for reducing boilerplate code -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.38</version>
      <scope>provided</scope>
    </dependency>
    <!-- JavaFaker for generating fake data -->
    <dependency>
      <groupId>com.github.javafaker</groupId>
      <artifactId>javafaker</artifactId>
      <version>1.0.2</version>
    </dependency>
  </dependencies>
  <build>
    <extensions>
      <!-- Used to inject the OS and architecture values in a consistent manner -->
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.7.1</version>
      </extension>
    </extensions>
    <resources>
      <resource>
        <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
         properties for configuration. -->
        <directory>${project.basedir}/src/packaging</directory>
        <filtering>true</filtering>
        <targetPath>${project.build.directory}/packaging</targetPath>
      </resource>
      <!-- Add the default resource path back in - by overriding above it disables the default -->
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/*.webp</exclude>
          <exclude>**/*.jpg</exclude>
          <exclude>**/*.jpeg</exclude>
          <exclude>**/*.png</exclude>
          <exclude>**/*.gif</exclude>
          <exclude>**/*.ico</exclude>
          <exclude>**/*.pdf</exclude>
          <exclude>**/*.mp4</exclude>
          <exclude>**/*.mp3</exclude>
          <exclude>**/*.wav</exclude>
        </excludes>
      </resource>
      <!-- Add binary resources without filtering -->
      <resource>
        <directory>${project.basedir}/src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*.webp</include>
          <include>**/*.jpg</include>
          <include>**/*.jpeg</include>
          <include>**/*.png</include>
          <include>**/*.gif</include>
          <include>**/*.ico</include>
          <include>**/*.pdf</include>
          <include>**/*.mp4</include>
          <include>**/*.mp3</include>
          <include>**/*.wav</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <!-- Maven Dependency Plugin for copying dependencies -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.6.1</version>
        <executions>
          <execution>
            <!-- This copies the jar files declared by the Maven build into a single directory.
            This makes it easy to assemble the final installer package -->
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <!-- Include only compile stage dependencies (no test dependencies) -->
              <includeScope>compile</includeScope>
              <!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to
              duplicate
              them in the bundled app and installer. This command skips all of the JavaFX by groupId. -->
              <excludeGroupIds>org.openjfx</excludeGroupIds>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Maven Jar Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <!-- Put the application jar generated by the project into the dependency folder - the
          default folder
          for the maven-dependency-plugin output. -->
          <outputDirectory>${project.build.directory}/dependency</outputDirectory>
          <archive>
            <manifest>
              <mainClass>${main-class}</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Maven Compiler Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <source>21</source>
          <target>21</target>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>1.18.38</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <!-- JToolProvider Plugin for jlink and jpackage -->
      <plugin>
        <groupId>io.github.wiverson</groupId>
        <artifactId>jtoolprovider-plugin</artifactId>
        <version>1.0.34</version>
        <executions>
          <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules
          bundled in
          this project with the JDK modules. -->
          <execution>
            <id>jlink</id>
            <phase>package</phase>
            <goals>
              <goal>java-tool</goal>
            </goals>
            <configuration>
              <toolName>jlink</toolName>
              <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
              <addModules>${jvm.modules}</addModules>
              <output>${project.build.directory}/jvm-image</output>
              <args>
                <arg>--strip-native-commands</arg>
                <arg>--no-header-files</arg>
                <arg>--strip-debug</arg>
                <arg>--no-man-pages</arg>
                <arg>--compress=2</arg>
              </args>
            </configuration>
          </execution>
          <!-- The command that actually generates the installer. The options for each platform
          are found the /src/packaging directory. These files are copied into the target directory by
          the Maven resources plugin, which does the filtering to replace the original values with
          the actual Maven properties. -->
          <execution>
            <id>jpackage</id>
            <phase>install</phase>
            <goals>
              <goal>java-tool</goal>
            </goals>
            <configuration>
              <toolName>jpackage</toolName>
              <writeOutputToLog>true</writeOutputToLog>
              <writeErrorsToLog>true</writeErrorsToLog>
              <failOnError>true</failOnError>
              <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
              <args>@${project.build.directory}/packaging/${os.detected.name}-jpackage.txt</args>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- JavaFX Maven Plugin -->
      <plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
          <mainClass>${main-class}</mainClass>
        </configuration>
      </plugin>

      <!-- Exec Maven Plugin for running Java applications -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <cleanupDaemonThreads>false</cleanupDaemonThreads>
        </configuration>
      </plugin>

      <!-- OpenRewrite Plugin for Code Refactoring and Best Practices -->
      <plugin>
        <groupId>org.openrewrite.maven</groupId>
        <artifactId>rewrite-maven-plugin</artifactId>
        <version>5.36.0</version>
        <configuration>
          <exportDatatables>true</exportDatatables>
          <configLocation>rewrite.yml</configLocation>
          <activeRecipes>
            <recipe>org.openrewrite.recipes.JavaRecipeBestPractices</recipe>
            <recipe>org.openrewrite.java.migrate.UpgradeToJava17</recipe>
            <recipe>org.openrewrite.recipes.OpenRewriteBestPractices</recipe>
            <recipe>org.openrewrite.recommendations.CodeHealth</recipe>
            <recipe>org.openrewrite.recommendations.CodeStyle</recipe>
            <recipe>org.openrewrite.staticanalysis.MissingOverrideAnnotation</recipe>
            <recipe>org.openrewrite.staticanalysis.CodeCleanup</recipe>
            <recipe>org.openrewrite.staticanalysis.AddSerialVersionUidToSerializable</recipe>
            <recipe>org.openrewrite.staticanalysis.ExplicitInitialization</recipe>
            <recipe>org.openrewrite.staticanalysis.FinalizePrivateFields</recipe>
            <recipe>org.openrewrite.staticanalysis.MethodNameCasing</recipe>
            <recipe>org.openrewrite.staticanalysis.UnnecessaryParentheses</recipe>
            <recipe>org.openrewrite.staticanalysis.UseDiamondOperator</recipe>
            <recipe>com.esprit.recipes.AddJavadocComments</recipe>
          </activeRecipes>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.openrewrite.recipe</groupId>
            <artifactId>rewrite-migrate-java</artifactId>
            <version>3.11.0</version>
          </dependency>
          <dependency>
            <groupId>org.openrewrite.recipe</groupId>
            <artifactId>rewrite-static-analysis</artifactId>
            <version>1.12.0</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.6.3</version>
        <configuration>
          <source>21</source>
          <encoding>UTF-8</encoding>
          <docencoding>UTF-8</docencoding>
          <charset>UTF-8</charset>
          <reportOutputDirectory>${project.build.directory}/reports</reportOutputDirectory>
          <destDir>apidocs</destDir>
          <tags>
            <tag>
              <name>apiNote</name>
              <placement>a</placement>
              <head>API Note:</head>
            </tag>
            <tag>
              <name>implSpec</name>
              <placement>a</placement>
              <head>Implementation Requirements:</head>
            </tag>
            <tag>
              <name>implNote</name>
              <placement>a</placement>
              <head>Implementation Note:</head>
            </tag>
            <tag>
              <name>returns</name>
              <placement>m</placement>
              <head>Returns:</head>
            </tag>
          </tags>
        </configuration>
      </plugin>

      <!-- SpotBugs Plugin for Static Analysis -->
      <plugin>
        <groupId>com.github.spotbugs</groupId>
        <artifactId>spotbugs-maven-plugin</artifactId>
        <version>4.8.2.0</version>
        <configuration>
          <effort>Max</effort>
          <threshold>Low</threshold>
          <failOnError>false</failOnError>
          <xmlOutput>true</xmlOutput>
          <spotbugsXmlOutputDirectory>${project.build.directory}/spotbugs</spotbugsXmlOutputDirectory>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>one.jpro</groupId>
        <artifactId>jpro-maven-plugin</artifactId>
        <version>${jpro.version}</version>
        <configuration>
          <mainClassName>${main-class}</mainClassName>
          <visible>false</visible>
          <openURLOnStartup>false</openURLOnStartup>
        </configuration>
      </plugin>
      <!-- Maven Deploy Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.1.1</version>
      </plugin>

      <!-- Maven Site Plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>4.0.0-M13</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <!-- GitHub Actions profile for setting dynamic version -->
    <profile>
      <id>GitHub Run</id>
      <activation>
        <property>
          <name>env.GITHUB_ACTIONS</name>
        </property>
      </activation>
      <properties>
        <!--suppress
        UnresolvedMavenProperty -->
        <app.version>1.0.${env.GITHUB_RUN_NUMBER}</app.version>
      </properties>
    </profile>

    <!-- Local Development profile -->
    <profile>
      <id>Local Development Run</id>
      <activation>
        <property>
          <name>!env.GITHUB_ACTIONS</name>
        </property>
      </activation>
      <properties>
        <app.version>${project.version}</app.version>
      </properties>
    </profile>

    <!-- Windows-specific profile -->
    <profile>
      <id>windows-active</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the
            Windows
             installer package to run the executable after the installer runs, simplifying the user experience.
              If you don't want this behavior, just delete this plug execution. -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.1.1</version>
            <executions>
              <execution>
                <phase>install</phase>
                <id>add-launch-to-msi</id>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <executable>cscript</executable>
              <outputFile>${project.build.directory}/msi-result.log</outputFile>
              <workingDirectory>${project.build.directory}</workingDirectory>
              <arguments>
                <argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
              </arguments>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>